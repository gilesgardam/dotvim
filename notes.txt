Use :make and quickfix! (Accessible via <leader>m.)

Use <c-x><c-l> to complete whole lines (and look at other :help ins-completion).

Complicated regular expressions are nice enough with /, since you get
highlighting, but can be difficult with :substitute, because you don't. So do
something like /complicatedregex, check highlighting, then use the empty regex
to match it, for example in :%s///g with <leader>r to delete. You can also
<c-r>/ to pull from tHE search register (or any other register).

gi goes into insert mode where you last left it.

ge is the opposite of e, like b is the opposite of w.

gf opens the file whose name is under the cursor.

Dial :h for help (it's quicker).

Use the ex command :norm (e.g. to do something on all visually selected lines).

gu and gU change to lower and upper case respectively (they take motions!).

Default register is ", so use <c-r>" to paste from it on cmd line.

Use :g and :v for quick-and-easy grepping.

Type q/ to bring up search history (just like the 'fail quit' that brings up
cmd line q:).

Use :g/pattern/norm @q for magic.

Use <C-p> and <C-n> to scroll command and search history (rather than arrows).

OMG: <C-o> and <C-i>, jump list magic.

OMG: Refer to a register in uppercase to append to it.

Spelling: zg marks as good, [s and ]s jump to errors, z= pulls up suggestions.

Use closing paren/bracket/brace with surround.vim to avoid the extra spaces.

Use g$ to go to the end of the screen line (like with gj and gk).

Use windows (vim windows, not microsoft windows)!

To "filter" visually selected text without replacing it, type `:w !cmd`.

To paste code to be aligned, use [p (it's like "match destination indentation").

Use \r to get a newline in :substitute.

Use g; and g, to navigate the change list.

The 0 register stores yanked text, but not deleted text.
